The simulation is composed of 5 packages :
    IdeaSim
    Resources
    SimMain
    Task
    Trace

IdeaSim:
    IdeaSim is an extension of the SimPy framework, written by me witch add support and logic for easiest request of
    resources, event generation and handling, performer witch can execute actions with dependecy between them.
    It's composed of 5 modules:
        Actions
        Event
        Manager
        Resources
        Simulation

    Simulation:
        Simulation contains the definition od simulation witch is a class who extend the simpy Environment, adding the
        management of resources, a logger to log various event and a status that can be accessed from everywhere within
        the simulation

    Resources:
    Resources implements some class extending the basic resource of SimPy, these are:
        Resources that only add a unique id and a reference to the simulation.
        Perform which can perform action, this is achieved by the mapping between Action type and a method.
        Movable a resource which can be moved

    Event:
        Event is an object which can set to trigger at some point in the future, the manager class is going to map it to a
        method by its type

    Manager:
        The manager object menage events, calling the mapped function and lacing the executor if the function return an
        ActionGraph

    Action:
        This module define classes to manage action to be performed by Perform:
        Action:
            The action class is an action to be performed, it as :
                action_graph -> the relative actionGraph
                type -> the type of the event, the key of the mapping on the performer
                who -> id of the performer which is going to execute the action, can be a lambda
                sort_by -> if who is a lambda the smallest result will be selected
                param -> a dict to be passed to the function call on the performer
                after -> list of id of action to be performed BEFORE this one
                condition -> a lambda evaluated before execution, if false the execution will be skipped. The mapped function
                wont be called but for the dependencies function the action is considered done
                on_false -> method to be called if condition is false
                branch -> se later
        Other class extending Action for auto manage of common needs:
            Block -> requesting a resources (perform must be blocked before performing)
            Free -> release of resources
            GenerateEvent -> generate an event
            Branch -> A special action without performer, with a condition. Other action can be tied to a branch via
            the the branch  parameter to easier implementation of optional (depend from the situation) step in execution.
            branch can be tied to other branches
        ActionGraph:
            A container for a set of actions with dependencies. This is the will be executed and that can request resources
        Executor:
            Object called by the manager. It control and manage the execution of an ActionsGraph

SimMain:
    Contains module to set, start and control the simulation:
        main
        Monitor
        SimulationParameter
        Strategy
        Warehouse

    SimulationParameter
        Class aggregation all the parameter of a simulation
            rendiment -> rediment of engines
            Fr -> friction
            Cr -> c (don't know) ask degio
            Nsa -> number of satellite per  shuttle
            Nsh -> shuttle per lift
            Nli -> number of lifts
            Vz -> max speed of satellite
            Az -> acceleration of satellite
            Vy -> max speed of lift
            Ay -> acceleration of lifts
            Vx -> max speed of shuttles
            Ax -> acceleration of shuttle
            Cy -> non used
            Wli -> weight of lift
            Wsh -> weight of shuttle
            Wsa -> weight of satellite
            Lz -> width of pallet slot
            Ly -> height of level/channel
            Lx -> depth of channel
            Nz -> number of pallet slot in z dimension (width of warehouse)
            Ny -> number of level
            Nx -> number of channel in level (/2 for right left), i.e depth of warehouse
            bay_level -> level at which the bay is found (can be float)
            tech -> technology adopted
                0 -> lift+fork
                1 -> lift + shuttle + fork
                2 -> lift + shuttle + satellite
            strategy -> strategy adopted for selection of channel
                0 -> random
                1 -> nearest to bay, random section
                2 -> emptier channel

    Warehouse
        Warehouse take a SimulationParameter and add to the simulation all the necessary resources. It also take the
        trace of tasked to be performed

    Monitor
        Monitor is the object used to store info about the simulation and return SimulationResulted, an aggregation of
        stats about the warehouse. I also define the Results class that aggregate various stats:
            mean_task_wait -> not implemented yet, avarege wait for task
            mean_task_op_time -> mean time for task based on active time
            mean_task_tot_time -> mean time for task based on all sim time
            working_time -> warehouse active time (considered active if a resources is taken)
            time_per_task -> mean task per time from the point of view of the task (no pararellization)
            energy_consumed -> tot energy consumed in KW/h
            area
            volume
            single_CT
            double_CT
            

    Strategy:
        Implement the action sequences for different techs. Different techs are obtained by having the same resources of
        tech 2 but having different sequence for operation. The class also implements method for the different strategies:
        #todo write strat

main:
    The test() method of the Test class takes  the parameter of the warehouse and the parameter from which generate
    the trace. It run the simulation a return a Results objects

Trace:
    The method trace_generator() generate the trace for the simulation based on TraceParameter:
        type_num -> number of type of pallet
        sim_time -> simulation time
        seed -> seed for generation
        start_fullness -> starting fraction of full ubik (filled with the selected strategy)
        int_mean -> mean time between task (generate based on a exponential distribution)

Task:
    Task
        Class that rappresent a sigle order, it has:
         order_type -> DEPOSIT ot RETRIEVAL
         id -> unique id auto generated
         Item -> the item

    Item
        Represent a pallet has a type,a generated id and a weight

    TaskDispatcher
        Class that generate event based on a trace. Called by the warehouse generator

Resources:
    Extend the IdeaSim resource for this specific simulation

    ActionType:
        enum of actions that performers implemented in the package can perform

    Movement:
        Position class represent the positions of a resources:
            section
            x
            level
            z

        The distance method return the manhattan distance between two position

        MovableResource implement method that manage the movement of a resource

    EnergyModel:
        Implement the energy model for resources movement. It calculate the energy used in a movement

    Bay:
        the bay resource

    Lift,Shuttle and Satellite are perform that represent the 3 machines
